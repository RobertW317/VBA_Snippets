Private sht As Worksheet
Public Property Set In_SapSheet(ByVal vNewValue As Worksheet)    Set sht = vNewValue    runProgEnd Property
Function clean_column_name(colName As String) As String    Dim str As String        str = Replace(colName, " ", "_", , , vbTextCompare)    str = Replace(str, "#", "No", , , vbTextCompare)    str = Replace(str, "%", "Pct", , , vbTextCompare)    str = Replace(str, "$", "Usd", , , vbTextCompare)    str = Replace(str, "/", "Per", , , vbTextCompare)    str = Replace(str, "?", "Q", , , vbTextCompare)    str = Replace(str, ".", "", , , vbTextCompare)    str = Replace(str, "(", "_", , , vbTextCompare)    str = Replace(str, ")", "_", , , vbTextCompare)    str = Replace(str, "&", "_", , , vbTextCompare)    str = Replace(str, "-", "_", , , vbTextCompare)        'bigmachine    str = Replace(str, "Quote", "Qt", , , vbTextCompare)    str = Replace(str, "Inquiry", "Inq", , , vbTextCompare)    str = Replace(str, "Sales_Order", "So", , , vbTextCompare)    str = Replace(str, "Big_Machines", "BM", , , vbTextCompare)        str = Replace(str, "Estimate", "Est", , , vbTextCompare)    str = Replace(str, "Sheet", "Sht", , , vbTextCompare)    str = Replace(str, "Salesperson", "SE", , , vbTextCompare)        str = Replace(str, "Application_Engineer", "AE", , , vbTextCompare)    str = Replace(str, "Project_Manager", "PM", , , vbTextCompare)    str = Replace(str, "End_User", "EU", , , vbTextCompare)    str = Replace(str, "Customer", "SoldTo", , , vbTextCompare)    str = Replace(str, "Discount", "Disc", , , vbTextCompare)    str = Replace(str, "Extended", "Ext", , , vbTextCompare)    str = Replace(str, "Engineering", "Eng", , , vbTextCompare)    str = Replace(str, "Quantity", "Qty", , , vbTextCompare)    str = Replace(str, "Configuration", "Config", , , vbTextCompare)    str = Replace(str, "Inquiry", "Inq", , , vbTextCompare)    str = Replace(str, "Inquiry", "Inq", , , vbTextCompare)            clean_column_name = strEnd Function

Function runProg()    Dim rng As Range, ct As Long, strA As String    Dim sht2 As Worksheet, rng2 As Range, colName As String        Set sht2 = sht.Parent.Worksheets.Add    Set rng2 = sht2.Range("a1")        Set rng = sht.Range("a1")          rng2.Offset(ctr, 0) = "Private Const fPath As String = " & """" & "c:\temp\" & """": ctr = ctr + 1      rng2.Offset(ctr, 0) = "Private Const fName As String = " & """" & sht.Name & ".csv" & """": ctr = ctr + 1          rng2.Offset(ctr, 0) = "Private shtData As Worksheet": ctr = ctr + 1     rng2.Offset(ctr, 0) = "Private maxRw As Long, maxCol As Long": ctr = ctr + 1     rng2.Offset(ctr, 0) = "Private CurRowCount As Long": ctr = ctr + 1         rng2.Offset(ctr, 0) = "Private IsObjOk As Boolean": ctr = ctr + 1     rng2.Offset(ctr, 0) = "Public CurRowNo As Long": ctr = ctr + 1      rng2.Offset(ctr, 0) = "Private DidClassOpenBook As Boolean": ctr = ctr + 1
    For x = 0 To 250        If x / 10 = CInt(x / 10) Then            rng2.Offset(ctr, 0) = strA            strA = ""            ctr = ctr + 1            ct = 0        End If                If Not IsEmpty(rng.Offset(0, x)) Then            colName = clean_column_name(rng.Offset(0, x).Value)            If ct = 0 Then                strA = "Private c" & colName & " as long"                ct = 1                Else                strA = strA & ", c" & colName & " as long"            End If        End If    Next x            rng2.Offset(ctr, 0) = strA    ctr = ctr + 2                For x = 0 To 250            If Not IsEmpty(rng.Offset(0, x)) Then           colName = clean_column_name(rng.Offset(0, x).Value)           ' If ct = 0 Then                rng2.Offset(ctr, 0) = "Public Property Get " & colName & "() As String": ctr = ctr + 1                rng2.Offset(ctr, 0) = "   " & colName & " = shtData.Cells(CurRowNo, c" & colName & ")": ctr = ctr + 1                rng2.Offset(ctr, 0) = "End Property": ctr = ctr + 1                ctr = ctr + 2           ' End If        End If    Next x                rng2.Offset(ctr, 0) = "private function setupColumns()"    ctr = ctr + 1        For x = 0 To 250        If Not IsEmpty(rng.Offset(0, x)) Then            colName = clean_column_name(rng.Offset(0, x).Value)            rng2.Offset(ctr, 0) = "Set rng = Find_Part(" & """" & rng.Offset(0, x) & """" & ", shtData.Range(" & """" & "a1" & """" & "))"            ctr = ctr + 1             rng2.Offset(ctr, 0) = "If rng Is Nothing Then"             ctr = ctr + 1              rng2.Offset(ctr, 0) = "MsgBox " & """" & "Macro cannot find column in datasheet. '" & rng.Offset(0, x) & "'"            ctr = ctr + 1               rng2.Offset(ctr, 0) = "Exit Function"               ctr = ctr + 1            rng2.Offset(ctr, 0) = "Else"            ctr = ctr + 1            rng2.Offset(ctr, 0) = "   c" & colName & " = rng.Column"            ctr = ctr + 1            rng2.Offset(ctr, 0) = "End If "            ctr = ctr + 3        End If    Next x    rng2.Offset(ctr, 0) = "end function"   ctr = ctr + 1    ctr = ctr + 1
rng2.Offset(ctr, 0) = "Function WorkBookLastModidfied(bk As Workbook)": ctr = ctr + 1rng2.Offset(ctr, 0) = "    Dim fs, f, s": ctr = ctr + 1rng2.Offset(ctr, 0) = "    Set fs = CreateObject(""Scripting.FileSystemObject"")": ctr = ctr + 1rng2.Offset(ctr, 0) = "    Set f = fs.getfile(bk.FullName)": ctr = ctr + 1rng2.Offset(ctr, 0) = "    WorkBookLastModidfied = f.DateLastModified": ctr = ctr + 1rng2.Offset(ctr, 0) = "    Set fs = Nothing": ctr = ctr + 1rng2.Offset(ctr, 0) = "End Function": ctr = ctr + 1ctr = ctr + 1: ctr = ctr + 1
rng2.Offset(ctr, 0) = "Private Sub Class_Initialize()": ctr = ctr + 1rng2.Offset(ctr, 0) = "    Dim rng As Range, str As String": ctr = ctr + 1rng2.Offset(ctr, 0) = "    Dim bk As Workbook, bk2 As Workbook": ctr = ctr + 1rng2.Offset(ctr, 0) = "    ": ctr = ctr + 1rng2.Offset(ctr, 0) = "    For Each bk2 In Application.Workbooks": ctr = ctr + 1rng2.Offset(ctr, 0) = "        If bk2.Name = fName Then": ctr = ctr + 1rng2.Offset(ctr, 0) = "            Set bk = bk2": ctr = ctr + 1rng2.Offset(ctr, 0) = "            DidClassOpenBook = False": ctr = ctr + 1rng2.Offset(ctr, 0) = "            Exit For": ctr = ctr + 1rng2.Offset(ctr, 0) = "        End If": ctr = ctr + 1rng2.Offset(ctr, 0) = "    Next bk2": ctr = ctr + 1rng2.Offset(ctr, 0) = "    If bk Is Nothing Then": ctr = ctr + 1rng2.Offset(ctr, 0) = "        On Error Resume Next": ctr = ctr + 1rng2.Offset(ctr, 0) = "        Application.DisplayAlerts = False": ctr = ctr + 1rng2.Offset(ctr, 0) = "        Set bk = Workbooks.Open(Filename:=fPath & fName, _": ctr = ctr + 1rng2.Offset(ctr, 0) = "                                              ReadOnly:=True)": ctr = ctr + 1rng2.Offset(ctr, 0) = "        Application.DisplayAlerts = True": ctr = ctr + 1rng2.Offset(ctr, 0) = "        On Error GoTo 0": ctr = ctr + 1rng2.Offset(ctr, 0) = "        DidClassOpenBook = True": ctr = ctr + 1rng2.Offset(ctr, 0) = "    End If": ctr = ctr + 1rng2.Offset(ctr, 0) = "    If bk Is Nothing Then": ctr = ctr + 1Stoprng2.Offset(ctr, 0) = "        MsgBox ""Cannot find file on drive: '"" & fPath & fName": ctr = ctr + 1rng2.Offset(ctr, 0) = "        Exit Sub": ctr = ctr + 1rng2.Offset(ctr, 0) = "    End If": ctr = ctr + 1rng2.Offset(ctr, 0) = "    bk.Activate": ctr = ctr + 1
rng2.Offset(ctr, 0) = "    PositionWorkBook 2": ctr = ctr + 1
rng2.Offset(ctr, 0) = "    bk.ActiveSheet.Cells.Columns.AutoFit": ctr = ctr + 1rng2.Offset(ctr, 0) = "    Set shtData = bk.ActiveSheet": ctr = ctr + 1rng2.Offset(ctr, 0) = "    maxRw = shtData.Cells.Find(What:=""*"", SearchDirection:=xlPrevious, _": ctr = ctr + 1rng2.Offset(ctr, 0) = "                                searchOrder:=xlByRows).Row": ctr = ctr + 1rng2.Offset(ctr, 0) = "    maxCol = shtData.Cells.Find(What:=""*"", SearchDirection:=xlPrevious, _": ctr = ctr + 1rng2.Offset(ctr, 0) = "                                searchOrder:=xlByColumns).Column": ctr = ctr + 1rng2.Offset(ctr, 0) = "    Set rng = shtData.Range(""a1"").Resize(maxRw, maxCol)": ctr = ctr + 1rng2.Offset(ctr, 0) = "     ctr = ctr + 1"rng2.Offset(ctr, 0) = "    setupColumns": ctr = ctr + 1rng2.Offset(ctr, 0) = "    DataDt = WorkBookLastModidfied(rng.Parent.Parent)": ctr = ctr + 1rng2.Offset(ctr, 0) = "    'rng.Sort Key1:=shtData.Cells(1, cSapDt), Order1:=xlAscending, _": ctr = ctr + 1rng2.Offset(ctr, 0) = "                 Key2:=shtData.Cells(1, cSapTm), Order2:=xlAscending, _": ctr = ctr + 1rng2.Offset(ctr, 0) = "             Header:=xlGuess, OrderCustom:=1, _": ctr = ctr + 1rng2.Offset(ctr, 0) = "             MatchCase:=False, _": ctr = ctr + 1rng2.Offset(ctr, 0) = "             Orientation:=xlTopToBottom, _": ctr = ctr + 1rng2.Offset(ctr, 0) = "             DataOption1:=xlSortNormal, _": ctr = ctr + 1rng2.Offset(ctr, 0) = "             DataOption2:=xlSortNormal": ctr = ctr + 1rng2.Offset(ctr, 0) = "End Sub": ctr = ctr + 1
ctr = ctr + 1ctr = ctr + 1
rng2.Offset(ctr, 0) = "Private Function PositionWorkBook(colNo As Long)": ctr = ctr + 1rng2.Offset(ctr, 0) = "    Dim bk2 As Workbook, bl_Found As Boolean": ctr = ctr + 1rng2.Offset(ctr, 0) = "    Set bk2 = ActiveWorkbook": ctr = ctr + 1rng2.Offset(ctr, 0) = "    Dim bk As Workbook, sht As Worksheet, ctr As Long, newTop As Long": ctr = ctr + 1rng2.Offset(ctr, 0) = "    Dim ar() As Long": ctr = ctr + 1rng2.Offset(ctr, 0) = "    newTop = -2": ctr = ctr + 1rng2.Offset(ctr, 0) = "    bl_Found = False": ctr = ctr + 1rng2.Offset(ctr, 0) = "    For Each bk In Application.Workbooks": ctr = ctr + 1        rng2.Offset(ctr, 0) = "        If bk.Name <> bk2.Name Then": ctr = ctr + 1rng2.Offset(ctr, 0) = "        If CLng(bk.Windows(1).Left) > (colNo * 300 - 300) - 2 And _": ctr = ctr + 1rng2.Offset(ctr, 0) = "           CLng(bk.Windows(1).Left) < (colNo * 300 - 300) + 2 Then": ctr = ctr + 1rng2.Offset(ctr, 0) = "        If CLng(bk.Windows(1).Height) = 60 Then": ctr = ctr + 1rng2.Offset(ctr, 0) = "            If CLng(bk.Windows(1).Width) = 300 Then": ctr = ctr + 1rng2.Offset(ctr, 0) = "                If CLng(bk.Windows(1).Top) > newTop Then": ctr = ctr + 1rng2.Offset(ctr, 0) = "                    newTop = CLng(bk.Windows(1).Top)": ctr = ctr + 1rng2.Offset(ctr, 0) = "                    bl_Found = True": ctr = ctr + 1rng2.Offset(ctr, 0) = "                End If": ctr = ctr + 1rng2.Offset(ctr, 0) = "            End If": ctr = ctr + 1rng2.Offset(ctr, 0) = "        End If": ctr = ctr + 1rng2.Offset(ctr, 0) = "        End If": ctr = ctr + 1rng2.Offset(ctr, 0) = "        End If": ctr = ctr + 1rng2.Offset(ctr, 0) = "    Next bk": ctr = ctr + 1rng2.Offset(ctr, 0) = "    If bl_Found Then": ctr = ctr + 1rng2.Offset(ctr, 0) = "        newTop = newTop + 40": ctr = ctr + 1rng2.Offset(ctr, 0) = "        Else": ctr = ctr + 1rng2.Offset(ctr, 0) = "        newTop = 0": ctr = ctr + 1rng2.Offset(ctr, 0) = "    End If": ctr = ctr + 1rng2.Offset(ctr, 0) = "    bk2.Activate": ctr = ctr + 1rng2.Offset(ctr, 0) = "    With Application.ActiveWindow": ctr = ctr + 1rng2.Offset(ctr, 0) = "            .WindowState = xlNormal": ctr = ctr + 1rng2.Offset(ctr, 0) = "            .Width = 300  'Application.UsableWidth * 0.25": ctr = ctr + 1rng2.Offset(ctr, 0) = "            .Top = newTop '200 ": ctr = ctr + 1rng2.Offset(ctr, 0) = "            .Height = 60  'Application.UsableHeight * 0.25": ctr = ctr + 1rng2.Offset(ctr, 0) = "            .Left = (300 * colNo) - 300 'Application.UsableWidth * 0.25 * 2": ctr = ctr + 1rng2.Offset(ctr, 0) = "            .Zoom = 65": ctr = ctr + 1rng2.Offset(ctr, 0) = "        End With": ctr = ctr + 1rng2.Offset(ctr, 0) = "End Function": ctr = ctr + 1 ctr = ctr + 1'rng2.Offset(ctr, 0) = "function setupColumns()": ctr = ctr + 1
        
 rng2.Offset(ctr, 0) = "Public Property Get IsClassLoaded() As Boolean": ctr = ctr + 1 rng2.Offset(ctr, 0) = "    IsClassLoaded = IsObjOk": ctr = ctr + 1 rng2.Offset(ctr, 0) = "End Property": ctr = ctr + 1
 rng2.Offset(ctr, 0) = "Public Property Let Index(vNewValue As Long)": ctr = ctr + 1 rng2.Offset(ctr, 0) = "    CurRowNo = vNewValue+1": ctr = ctr + 1 rng2.Offset(ctr, 0) = "End Property": ctr = ctr + 1
 rng2.Offset(ctr, 0) = "Public Property Get Count() As Long": ctr = ctr + 1 rng2.Offset(ctr, 0) = "    Count = maxRw - 1": ctr = ctr + 1 rng2.Offset(ctr, 0) = "End Property": ctr = ctr + 1
 rng2.Offset(ctr, 0) = "Private Sub Class_Terminate()": ctr = ctr + 1             rng2.Offset(ctr, 0) = "if DidClassOpenBook then": ctr = ctr + 1     rng2.Offset(ctr, 0) = "shtData.Parent.Close False": ctr = ctr + 1     rng2.Offset(ctr, 0) = "end if": ctr = ctr + 1      rng2.Offset(ctr, 0) = "End Sub": ctr = ctr + 1  ctr = ctr + 1 
rng2.Offset(ctr, 0) = "Public Function Find_Part(findString As String, startRng As Range, _":  ctr = ctr + 1rng2.Offset(ctr, 0) = "                          Optional RngToSearch As Range) As Range":  ctr = ctr + 1rng2.Offset(ctr, 0) = "   Dim rng As Range":  ctr = ctr + 1rng2.Offset(ctr, 0) = "If RngToSearch Is Nothing Then":  ctr = ctr + 1rng2.Offset(ctr, 0) = "        Set RngToSearch = startRng.Parent.Cells":  ctr = ctr + 1rng2.Offset(ctr, 0) = "   End If":  ctr = ctr + 1rng2.Offset(ctr, 0) = "   Set rng = RngToSearch.Find( _":  ctr = ctr + 1rng2.Offset(ctr, 0) = "                What:=findString, _":  ctr = ctr + 1rng2.Offset(ctr, 0) = "                after:=startRng, _":  ctr = ctr + 1rng2.Offset(ctr, 0) = "                LookIn:=xlFormulas, _":  ctr = ctr + 1rng2.Offset(ctr, 0) = "                lookat:=xlWhole, _":  ctr = ctr + 1rng2.Offset(ctr, 0) = "                SearchOrder:=xlByRows, _":  ctr = ctr + 1rng2.Offset(ctr, 0) = "                SearchDirection:=xlNext, _":  ctr = ctr + 1rng2.Offset(ctr, 0) = "                MatchCase:=False, _":  ctr = ctr + 1rng2.Offset(ctr, 0) = "                SearchFormat:=False)":  ctr = ctr + 1rng2.Offset(ctr, 0) = "  If rng Is Nothing Then":  ctr = ctr + 1rng2.Offset(ctr, 0) = "        Set Find_Part = Nothing":  ctr = ctr + 1rng2.Offset(ctr, 0) = "        Else":  ctr = ctr + 1rng2.Offset(ctr, 0) = "        Set Find_Part = rng":  ctr = ctr + 1rng2.Offset(ctr, 0) = "  End If":  ctr = ctr + 1rng2.Offset(ctr, 0) = "End Function":  ctr = ctr + 1
ctr = ctr + 1ctr = ctr + 1
'''''''''''''''
    rng2.Offset(ctr, 0) = "Public Function SetToFieldName(fieldName As String) As Boolean":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Dim rng As Range, rng2 As Range, str As String, strA As String":  ctr = ctr + 1ctr = ctr + 1rng2.Offset(ctr, 0) = "    Set rng = shtData.Cells(1, cFieldColumnNo).EntireColumn":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Set rng2 = rng.Resize(1, 1)":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    m_fieldName = fieldname":  ctr = ctr + 1rng2.Offset(ctr, 0) = "Set rng2 = rng.Find(m_fieldName, rng2, SearchDirection:=xlNext, searchOrder:=xlByRows)":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    If rng2 Is Nothing Then Exit Function":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Index = rng2.Row - 1":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    SetToProject = True":  ctr = ctr + 1rng2.Offset(ctr, 0) = "End Function":  ctr = ctr + 1
ctr = ctr + 1:  ctr = ctr + 1
rng2.Offset(ctr, 0) = "Public Function SetToFieldName_Next() As Boolean":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Dim rng As Range, rng2 As Range, str As String, strA As String":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Dim rng3 As Range":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Set rng = shtData.Cells(1, cfieldColnNo).EntireColumn":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Set rng2 = shtData.Cells(CurRowNo, rng.Column)":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Set rng3 = rng2":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Set rng2 = rng.Find(m_fieldName, rng2, SearchDirection:=xlNext, searchOrder:=xlByRows)":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    If rng2 Is Nothing Then Exit Function":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    If rng2.Row <= rng3.Row Then Exit Function":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Index = rng2.Row - 1":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    SetToProject_Next = True":  ctr = ctr + 1rng2.Offset(ctr, 0) = "End Function":  ctr = ctr + 1ctr = ctr + 1

rng2.Offset(ctr, 0) = "Private Function removeDupsFrom1dimVarArray(ByVal var As Variant) As Variant":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Dim NoDupes As New Collection, ct As Long":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Dim newAr() As String":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Dim i As Integer, j As Integer":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Dim x As Long":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    On Error Resume Next":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    For x = LBound(var, 1) To UBound(var, 1)":  ctr = ctr + 1rng2.Offset(ctr, 0) = "        If Not IsEmpty(var(x)) Then":  ctr = ctr + 1rng2.Offset(ctr, 0) = "           NoDupes.Add var(x), CStr(var(x))":  ctr = ctr + 1rng2.Offset(ctr, 0) = "           Else":  ctr = ctr + 1rng2.Offset(ctr, 0) = "        End If":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Next x":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    ct = 0":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    For x = 1 To NoDupes.Count":  ctr = ctr + 1rng2.Offset(ctr, 0) = "        If CStr(NoDupes.Item(x)) <> """" Then":  ctr = ctr + 1rng2.Offset(ctr, 0) = "            ReDim Preserve newAr(ct)":  ctr = ctr + 1rng2.Offset(ctr, 0) = "            newAr(ct) = CStr(NoDupes.Item(x))":  ctr = ctr + 1rng2.Offset(ctr, 0) = "            ct = ct + 1":  ctr = ctr + 1rng2.Offset(ctr, 0) = "        End If":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Next x":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    removeDupsFrom1dimVarArray = newAr":  ctr = ctr + 1rng2.Offset(ctr, 0) = "End Function":  ctr = ctr + 1ctr = ctr + 1ctr = ctr + 1
rng2.Offset(ctr, 0) = "Public Function Return_WbsList()":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Dim ar() As String":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    ReDim ar(maxRw + 1)":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    For x = 0 To maxRw":  ctr = ctr + 1rng2.Offset(ctr, 0) = "        ar(x) = shtData.Cells(2 + x, cPROJK_Wbs)":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Next x":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    var = removeDupsFrom1dimVarArray(ar)":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Return_WbsList = var":  ctr = ctr + 1rng2.Offset(ctr, 0) = "End Function":  ctr = ctr + 1
ctr = ctr + 1:  ctr = ctr + 1

rng2.Offset(ctr, 0) = "Private Function IsVariant1Dim(varSI As Variant) As Boolean":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    On Error GoTo errHand":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    x = UBound(varSI, 1)":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    IsVariant1Dim = True":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Exit Function":  ctr = ctr + 1rng2.Offset(ctr, 0) = "errHand:":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    IsVariant1Dim = False":  ctr = ctr + 1rng2.Offset(ctr, 0) = "End Function":  ctr = ctr + 1ctr = ctr + 2
rng2.Offset(ctr, 0) = "Public Function Return_newBkSheet() As Worksheet":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Dim bk As Workbook":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Dim sh As Worksheet":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    On Error Resume Next":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Application.DisplayAlerts = False":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Set bk = Application.Workbooks.Add":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    For x = 1 To bk.Worksheets.Count - 1":  ctr = ctr + 1rng2.Offset(ctr, 0) = "        bk.Worksheets(1).Select":  ctr = ctr + 1rng2.Offset(ctr, 0) = "        bk.Worksheets(1).Delete":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Next x":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Application.DisplayAlerts = True":  ctr = ctr + 1rng2.Offset(ctr, 0) = "    Set Return_newBkSheet = bk.Worksheets(1)":  ctr = ctr + 1rng2.Offset(ctr, 0) = "End Function":  ctr = ctr + 1ctr = ctr + 2

End Function

Public Function Replace(sIn As String, _                        sFind As String, _                        sReplace As String, _                        Optional nStart As Long = 1, _                        Optional nCount As Long = -1, _                        Optional bCompare As VbCompareMethod = vbBinaryCompare) As String    Dim nC As Long, nPos As Integer, sOut As String        sOut = Trim(sIn)    nPos = InStr(nStart, sOut, sFind, bCompare)    If nPos = 0 Then GoTo EndFn:    Do        nC = nC + 1        sOut = Left(sOut, nPos - 1) & sReplace & Mid(sOut, nPos + Len(sFind))        If nCount <> -1 And nC >= nCount Then Exit Do        nPos = InStr(nStart, sOut, sFind, bCompare)    Loop While nPos > 0    EndFn:    Replace = sOutEnd Function
